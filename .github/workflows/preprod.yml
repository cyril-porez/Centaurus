name: Preprod CI/CD

on:
  pull_request:
    branches: [ preprod ]
  push:
    branches: [ preprod ]

concurrency:
  group: preprod-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ci:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Vérifier la config Docker Compose
        run: docker compose -f docker-compose.yml -f docker-compose.preprod.yml config > /dev/null
  
  docker-validate:
    name: Docker Compose - validate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Vérifier la config Docker Compose
        run: docker compose -f docker-compose.yml -f docker-compose.preprod.yml config > /dev/null

  backend-tests:
    name: Go backend - tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'
          cache: true

      # IMPORTANT : ajoute les dépendances manquantes dans go.mod/go.sum
      - name: Tidy (ensure go.mod/go.sum are complete)
        run: go mod tidy -v

      - name: Go vet
        run: go vet ./...

      - name: Run tests (race + coverage)
        run: go test ./... -v -race -covermode=atomic -coverprofile=cover.out

      - name: Coverage summary
        run: go tool cover -func=cover.out

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: backend/cover.out

  deploy:
    if: github.event_name == 'push'
    needs: [ docker-validate, backend-tests ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Démarrer l'agent SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.RPI_SSH_PRIVATE_KEY }}

      - name: Ajouter le Pi dans known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p "${{ secrets.RPI_PORT }}" -H "${{ secrets.RPI_HOST }}" >> ~/.ssh/known_hosts

      - name: Déployer sur le Raspberry Pi
        env:
          RPI_HOST: ${{ secrets.RPI_HOST }}
          RPI_PORT: ${{ secrets.RPI_PORT }}
          RPI_USER: ${{ secrets.RPI_USER }}
          RPI_PATH: ${{ secrets.RPI_PATH }}
        run: |
          set -euo pipefail
          # Clé/known_hosts: déjà fait dans les étapes précédentes
          ssh -o StrictHostKeyChecking=no -p "$RPI_PORT" "$RPI_USER@$RPI_HOST" bash -s <<EOF
            set -euo pipefail
            cd "$RPI_PATH"          # <� ici la valeur est déj& résolue par le runner
            echo "Dans: \$(pwd)"
            git fetch --all
            git reset --hard origin/preprod
            make preprod
          EOF
  notify:
    if: always() # Toujours notifier, m�me si le build ou le d�ploiement �choue
    needs: [docker-validate, backend-tests, deploy]
    runs-on: ubuntu-latest
    steps:
      - name: Notify Google Chat
        run: |
          STATUS="? D�ploiement r�ussi"
          COLOR="green"
          if [ "${{ needs.deploy.result }}" != "success" ]; then
            STATUS="? D�ploiement �chou�"
            COLOR="red"
          fi

          PR_LINK="${{ github.event.pull_request.html_url || '(Push direct sans PR)' }}"
          ACTOR="${{ github.actor }}"
          RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          APP_URL="${{ secrets.APP_URL }}"

          curl -X POST \
            -H 'Content-Type: application/json' \
            -d "{
              \"cards\": [{
                \"header\": {
                  \"title\": \"CI/CD Preprod\",
                  \"subtitle\": \"${STATUS}\",
                  \"imageUrl\": \"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\"
                },
                \"sections\": [{
                  \"widgets\": [
                    {\"keyValue\": {\"topLabel\": \"Auteur\", \"content\": \"${ACTOR}\"}},
                    {\"keyValue\": {\"topLabel\": \"Pull Request\", \"content\": \"${PR_LINK}\"}},
                    {\"buttons\": [
                      {\"textButton\": {\"text\": \"Voir Workflow\", \"onClick\": {\"openLink\": {\"url\": \"${RUN_URL}\"}}}},
                      {\"textButton\": {\"text\": \"App D�ploy�e\", \"onClick\": {\"openLink\": {\"url\": \"${APP_URL}\"}}}}
                    ]}
                  ]
                }]
              }]
            }" \
            ${{ secrets.GCHAT_WEBHOOK }}
